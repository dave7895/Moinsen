name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.config.os }}

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
      CXX: ${{ matrix.config.compiler }} 

    strategy:
      matrix:
        #os: [windows-latest, ubuntu-22.04]
        config:
          - {
            os: ubuntu-22.04,
            compiler: g++
          }
          - {
            os: windows-latest,
            compiler: x86_64-w64-mingw32-c++
          }
    
    steps:
    - uses: actions/checkout@v3

    - name: get submodule
      run: |
        git submodule update --init --recursive
        git submodule update --recursive --remote

    - name: replace libchess CMakeLists
      if: runner.os == 'Windows'
      run: Copy-Item "libchessCMakeLists.txt" -Destination "libchess\CMakeLists.txt" -Force -Confirm:$False

    - name: Configure libchess build
      run: cmake -S ${{github.workspace}}/libchess -B ${{github.workspace}}/libchess/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build libchess
      run: cmake --build ${{github.workspace}}/libchess/build --target libchess-static --config ${{env.BUILD_TYPE}} -j 2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build main executable
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 2 --target Moinsen

    - name: Perft
      working-directory: ${{github.workspace}}/build
      if: runner.os == 'Linux'
      run: ./Moinsen bench

    - name: Perft
      working-directory: ${{github.workspace}}\build\${{env.BUILD_TYPE}}
      if: runner.os == 'Windows'
      run: ./Moinsen.exe bench

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --rerun-failed --output-on-failure
